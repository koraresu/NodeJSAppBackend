{
  "_args": [
    [
      "mongoose-format",
      "/Users/axovia/Proyecto/hive/server"
    ]
  ],
  "_from": "mongoose-format@latest",
  "_id": "mongoose-format@2.0.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/mongoose-format",
  "_npmUser": {
    "email": "christoffer.hallas@forsvikgroup.com",
    "name": "hallas"
  },
  "_npmVersion": "1.2.18",
  "_phantomChildren": {
    "hooks": "0.2.1",
    "regexp-clone": "0.0.1"
  },
  "_requested": {
    "name": "mongoose-format",
    "raw": "mongoose-format",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-format/-/mongoose-format-2.0.1.tgz",
  "_shasum": "8f4d2f9ab18b00296dfeafac901860e4d8ff25ad",
  "_shrinkwrap": null,
  "_spec": "mongoose-format",
  "_where": "/Users/axovia/Proyecto/hive/server",
  "author": {
    "name": "Christoffer Hallas"
  },
  "bugs": {
    "url": "https://github.com/hallas/mongoose-format/issues"
  },
  "dependencies": {
    "common": "~0.2.5",
    "mongoose": "~3.6.15",
    "underscore": "~1.5.1"
  },
  "description": "A Mongoose plugin that enables you to produce formatted output of your instantiated models.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "8f4d2f9ab18b00296dfeafac901860e4d8ff25ad",
    "tarball": "https://registry.npmjs.org/mongoose-format/-/mongoose-format-2.0.1.tgz"
  },
  "homepage": "https://github.com/hallas/mongoose-format#readme",
  "keywords": [
    "mongoose",
    "json",
    "api"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "hallas@calendize.com",
      "name": "hallas"
    }
  ],
  "name": "mongoose-format",
  "optionalDependencies": {},
  "readme": "mongoose-format\n===============\n\nA Mongoose plugin that enables you to produce formatted output of your instantiated models.\n\nIntroduction\n------------\n\nWhen using Mongoose, it is also likely that you are looking for different ways to output the contents of instances of your models.\n\nBut it is not always certain that you require all fields of your object, or maybe you wish them to be arranged in alternative manner.\n\nYou may even want to populate database references differently.\n\nThis plugin for Mongoose can solve all of those problems for you.\n\nAPI\n---\n```JavaScript\n\n  // schema.js\n  var formatPlugin = require('mongoose-format');\n\n  // schema definition\n  var schema = mongoose.schema({ ... });\n\n  schema.plugin(formatPlugin);\n  \n  schema.methods.someMethod = function () {\n    return this.value;\n  };\n  ...\n  \n  // model.js\n  // we require the schema from above\n  var schema = require(...);\n  \n  // create a model based on that schema\n  var Model = mongoose.model('Schema', schema);\n  \n  // let's add a format\n  Model.addFormat('api_v1', function (done) {\n    var format = {\n      fieldA: this.value,\n      fieldB: this.some_method()\n    };\n    done(null, format);\n  });\n  \n  // instantiate our model\n  var model = new Model({ ... });\n  \n  model.format('api_v1', function (err, output) {\n    console.log(output);\n  });\n  ...\n```\n\nI hope that piece of code is good enough to illustrate. I recommend using some kind of async flow control to create more advanced formats.\n\nLicense\n-------\nCopyright (C) 2012 Christoffer Hallas <christoffer.hallas@forsvikgroup.com>\n\nDistributed under the MIT License, the same as Node.js.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hallas/mongoose-format.git"
  },
  "scripts": {
    "test": "mocha --reporter spec test/"
  },
  "version": "2.0.1"
}
